version: '3'
services:
  api_server:
    build:
      context: ../backend
      dockerfile: Dockerfile
    depends_on:
      - relational_db
      - vector_db
      - search_engine
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=relational_db
      - QDRANT_HOST=vector_db
      - TYPESENSE_HOST=search_engine
      - TYPESENSE_API_KEY=${TYPESENSE_API_KEY:-local_dev_typesense}
    volumes:
      - local_dynamic_storage:/home/storage
      - file_connector_tmp_storage:/home/file_connector_storage
  background:
    build:
      context: ../backend
      dockerfile: Dockerfile.background
    depends_on:
      - relational_db
      - vector_db
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=relational_db
      - QDRANT_HOST=vector_db
    volumes:
      - local_dynamic_storage:/home/storage
      - file_connector_tmp_storage:/home/file_connector_storage
  web_server:
    build:
      context: ../web
      dockerfile: Dockerfile
    depends_on:
      - api_server
    restart: always
    env_file:
      - .env
    environment:
      - INTERNAL_URL=http://api_server:8080
  relational_db:
    image: postgres:15.2-alpine
    restart: always
    # POSTGRES_USER and POSTGRES_PASSWORD should be set in .env file
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - db_volume:/var/lib/postgresql/data
  vector_db:
    image: qdrant/qdrant:v1.1.3
    restart: always
    env_file:
      - .env
    volumes:
      - qdrant_volume:/qdrant/storage
  search_engine:
    image: typesense/typesense:0.24.1
    restart: always
    # TYPESENSE_API_KEY must be set in .env file
    environment:
      - TYPESENSE_DATA_DIR=/typesense/storage
    env_file:
      - .env
    ports:
      - "8108:8108"
    volumes:
      - typesense_volume:/typesense/storage
  nginx:
    image: nginx:1.23.4-alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./data/nginx:/etc/nginx/conf.d
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    command: > 
      /bin/sh -c "envsubst '$$\{DOMAIN\}' < /etc/nginx/conf.d/app.conf.template > /etc/nginx/conf.d/app.conf 
      && while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\""
    env_file:
      - .env.nginx
  # follows https://pentacent.medium.com/nginx-and-lets-encrypt-with-docker-in-less-than-5-minutes-b4b8a60d3a71
  certbot:
    image: certbot/certbot
    restart: always
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
volumes:
  local_dynamic_storage:
  file_connector_tmp_storage:  # used to store files uploaded by the user temporarily while we are indexing them
  db_volume:
  qdrant_volume:
  typesense_volume:
