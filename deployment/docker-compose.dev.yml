version: '3'
services:
  api_server:
    build:
      context: ../backend
      dockerfile: Dockerfile
    depends_on:
      - relational_db
      - vector_db
    restart: always
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=relational_db
      - QDRANT_HOST=vector_db
    volumes:
      - local_dynamic_storage:/home/storage
  background:
    build:
      context: ../backend
      dockerfile: Dockerfile.background
    depends_on:
      - relational_db
      - vector_db
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=relational_db
      - QDRANT_HOST=vector_db
    volumes:
      - local_dynamic_storage:/home/storage
  web_server:
    build:
      context: ../web
      dockerfile: Dockerfile
    depends_on:
      - api_server
    restart: always
    env_file:
      - .env
    environment:
      - INTERNAL_URL=http://api_server:8080
  relational_db:
    image: postgres:15.2-alpine
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - db_volume:/var/lib/postgresql/data
  vector_db:
    image: qdrant/qdrant:v1.1.3
    restart: always
    ports:
      - "6333:6333"
    volumes:
      - qdrant_volume:/qdrant/storage
  nginx:
    image: nginx:1.23.4-alpine
    restart: always
    depends_on:
      - api_server
      - web_server
    environment:
      - DOMAIN=localhost
    ports:
      - "80:80"
      - "3000:80"  # allow for localhost:3000 usage, since that is the norm
    volumes:
      - ./data/nginx:/etc/nginx/conf.d
    command: > 
      /bin/sh -c "envsubst '$$\{DOMAIN\}' < /etc/nginx/conf.d/app.conf.template.dev > /etc/nginx/conf.d/app.conf 
      && while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\""
volumes:
  local_dynamic_storage:
  db_volume:
  qdrant_volume:
